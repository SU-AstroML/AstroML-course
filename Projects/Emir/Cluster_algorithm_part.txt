Model Parameter Playground¶
In [158]:

stretchvals=np.zeros(len(g_band_shifts))
scalevals=np.zeros(len(g_band_shifts))
shiftvals=np.zeros(len(g_band_shifts))
for i in xrange(len(g_band_shifts)):
    stretchvals[i]=paramslist[i][0].value
    scalevals[i]=paramslist[i][2].value+g_band_shifts[i]
    shiftvals[i]=paramslist[i][1].value
    #print paramslist[i][0].value
    #print paramslist[i][2]
    #print g_band_shifts[i]
    
rstretchvals=np.zeros(len(r_band_shifts))
rscalevals=np.zeros(len(r_band_shifts))
rshiftvals=np.zeros(len(r_band_shifts))
for i in xrange(len(r_band_shifts)):
    rstretchvals[i]=paramslist_r[i][0].value
    rscalevals[i]=paramslist_r[i][2].value+r_band_shifts[i]
    rshiftvals[i]=paramslist_r[i][1].value
    #print paramslist[i][0].value
    #print paramslist[i][2]
    #print g_band_shifts[i]
    
strech_all=np.hstack((stretchvals,rstretchvals))
shift_all=np.hstack((shiftvals,rshiftvals))
scale_all=np.hstack((scalevals,rscalevals))
​
In [160]:

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
​
ax.scatter(scale_all, shift_all, strech_all)
ax.set_xlabel('scale')
ax.set_ylabel('shift')
ax.set_zlabel('stretch')
Out[160]:
<matplotlib.text.Text at 0x1438d7710>
In [223]:

plt.scatter(scalevals[:14],stretchvals[:14])
plt.ylabel('stretch')
plt.xlabel('scale')
Out[223]:
<matplotlib.text.Text at 0x110cc9b90>
In [122]:

from sklearn.cluster import KMeans
from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import scale
from sklearn.cluster import AgglomerativeClustering as Ward
from sklearn.cluster import DBSCAN
In [52]:

strech_all=np.hstack((paramslist[:,0],paramslist_r[:,0]))
shift_all=np.hstack((paramslist[:,1],paramslist_r[:,1]))
scale_all=np.hstack((paramslist[:,2],paramslist_r[:,2]))
In [234]:

broad=paramslist[8]
weird=paramslist[-1]
#paramslist[8][0].value
#print X2_i[8]
broad[2]+=g_band_shifts[8]
weird[2]+=g_band_shifts[-1]
In [258]:

n_clusters = 3
clf = KMeans(n_clusters)
​
X=numpy.vstack((scale_all,shift_all,strech_all)).T
​
#scaler = preprocessing.StandardScaler().fit(X)
X=scale(X)
clf.fit(X)
labels = clf.predict(X)
In [238]:

n_clusters = 2
clf2 = KMeans(n_clusters)
​
X2=numpy.vstack((scale_all,strech_all)).T
#scaler = preprocessing.StandardScaler().fit(X)
X2=scale(X2)
clf2.fit(X2)
labels = clf2.predict(X2)
In [246]:

#X=scaler.inverse_transform(X)
fig = plt.figure()
ax = fig.add_subplot(111)
#ax.scatter(X[:,0], X[:,1],s=30,c=labels, cmap='rainbow')
ax.scatter(scale_all, strech_all,s=30,c=labels, cmap='rainbow')
​
ax.scatter(broad[2],broad[0],s=100,marker='s',alpha=0.7,color='gray')
ax.scatter(weird[2],weird[0],s=100,marker='s',alpha=0.7,color='gray')
ax.set_ylabel('stretch')
ax.set_xlabel('scale')
#ax.set_zlabel('stretch')
Out[246]:
<matplotlib.text.Text at 0x144e2ddd0>
In [247]:

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
#ax.scatter(X[:,0], X[:,1], X[:,2], c=labels, cmap='rainbow')
ax.scatter(scale_all, shift_all, strech_all, c=labels, cmap='rainbow')
​
ax.scatter(broad[2],broad[1],broad[0],s=100,marker='s',alpha=0.7,color='gray')
ax.scatter(weird[2],weird[1],weird[0],s=100,marker='s',alpha=0.7,color='gray')
​
ax.set_xlabel('scale')
ax.set_ylabel('shift')
ax.set_zlabel('stretch')
Out[247]:
<matplotlib.text.Text at 0x1464f8c50>
In [265]:

db=DBSCAN(eps=0.9,min_samples=5).fit(X)
# Compute DBSCAN
core_samples_mask = np.zeros_like(db.labels_, dtype=bool)
core_samples_mask[db.core_sample_indices_] = True
labels = db.labels_
​
# Number of clusters in labels, ignoring noise if present.
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
​
fig = plt.figure()
ax = fig.add_subplot(111,projection='3d')
unique_labels = set(labels)
colors = plt.cm.Spectral(np.linspace(0, 1, len(unique_labels)))
​
#X=numpy.vstack((scale_all,shift_all,strech_all)).T
X=numpy.vstack((scale_all,shift_all,strech_all)).T
​
for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black used for noise.
        col = 'k'
​
    class_member_mask = (labels == k)
​
    xy = X[class_member_mask & core_samples_mask]
    ax.plot(xy[:, 0], xy[:, 1],xy[:, 2], 'o', markerfacecolor=col,
             markeredgecolor='k', markersize=14)
​
    xy = X[class_member_mask & ~core_samples_mask]
    ax.plot(xy[:, 0], xy[:, 1],xy[:, 2], 'o', markerfacecolor=col,
             markeredgecolor='k', markersize=6)
ax.set_xlabel('scale')
ax.set_ylabel('shift')
ax.set_zlabel('stretch')
plt.title('Estimated number of clusters: %d' % n_clusters_)
plt.show()
​